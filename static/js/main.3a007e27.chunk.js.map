{"version":3,"sources":["assets/png/logo.png","assets/svg/menu-burger.svg","components/header/index.js","views/main.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","Logo","alt","href","MenuBurger","Component","Main","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+FAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,oNCKtBC,G,uLAEb,OACI,4BAAQC,UAAU,UACd,yBAAKA,UAAU,eACX,yBAAKA,UAAU,OAAOC,IAAKC,IAAMC,IAAI,uCACrC,0BAAMH,UAAU,aAAhB,QAEJ,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,OACP,uBAAGI,KAAK,SAAR,SACA,uBAAGA,KAAK,SAAR,YACA,uBAAGA,KAAK,SAAR,kBAGR,yBAAKJ,UAAU,gBACX,yBAAKA,UAAU,cAAcC,IAAKI,IAAYF,IAAI,qC,GAhBlCG,cCDfC,G,uLAEb,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,EAAD,W,GAJkBF,cCQdG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD4H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3a007e27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b5c00256.png\";","module.exports = __webpack_public_path__ + \"static/media/menu-burger.875c2269.svg\";","import React, { Component } from 'react';\nimport Logo from '../../assets/png/logo.png';\nimport MenuBurger from '../../assets/svg/menu-burger.svg';\nimport './index.scss';\n\nexport default class Header extends Component {\n    render() {\n        return (\n            <header className='header'>\n                <div className='header-left'>\n                    <img className='logo' src={Logo} alt='Site logo - Icon of a welsh dragon'/>\n                    <span className='logo-name'>TWD</span>\n                </div>\n                <div className='header-center'>\n                <nav className='nav'>\n                        <a href='#home'>About</a>\n                        <a href='#home'>Sometext</a>\n                        <a href='#home'>Another text</a>\n                    </nav>\n                </div>\n                <div className='header-right'>\n                    <img className='menu-burger' src={MenuBurger} alt='Mobile menu icon - 3 lines'/>\n                </div>\n            </header>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Header from '../components/header';\nimport './main.scss';\n\nexport default class Main extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <Header/>\n            \n            </React.Fragment>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './views/main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}